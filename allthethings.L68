00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12-Dec-14 19:10:04

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : EA 
00000000                             3  * Written by : GKITZ
00000000                             4  * Date       : lol
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7      
00000000                             8  * -- Equates -- 
00000000                             9  
00000000  =00070000                 10  EAbuffer    EQU   $00070000    
00000000  =00002700                 11  Exit        EQU   $2700
00000000  =00006000                 12  TestLoc     EQU  $6000 
00000000  =0000000D                 13  CR          EQU         $0D             * Hex value for Carriage Return
00000000  =0000000A                 14  LF          EQU         $0A             * Hex value for New Line Read
00000000  =00000400                 15  START       EQU         $400            * Address for ORG
00000000  =00006000                 16  start_addr  EQU         $6000       * Starting address where the program is stored
00000000  =00003200                 17  test_bit1   EQU         $3200           * A Value to be used for testing 
00000000  =0000E459                 18  test_bit2   EQU         $E459           * A Value to be used for testing  
00000000  =000003F0                 19  holder      EQU         $3F0            * Location of lines to test
00000000  =00004E71                 20  nop_str     EQU         $4E71           * Hex value for NOP
00000000  =00000044                 21  neg_str     EQU         $44             * Hex value for NEG
00000000  =0000013A                 22  jsr_str     EQU         $13A            * Hex value for JSR
00000000  =00004E75                 23  rts_str     EQU         $4E75           * Hex value for RTS
00000000  =00000065                 24  bcs_str     EQU         $65             * Hex value for BCS
00000000  =0000006C                 25  bge_str     EQU         $6C             * Hex value for BGE
00000000  =0000006D                 26  blt_str     EQU         $6D             * Hex value for BLT
00000000  =00000068                 27  bvc_str     EQU         $68             * Hex value for BVC
00000000  =00000060                 28  bra_str     EQU         $60             * Hex value for BRA
00000000  =0000000D                 29  add_str     EQU         $D              * Hex value for ADD
00000000  =00000001                 30  bov_str     EQU         $1              * Hex value for MOVE.B
00000000  =00000003                 31  wov_str     EQU         $3              * Hex value for MOVE.W
00000000  =00000002                 32  lov_str     EQU         $2              * Hex value for MOVE.L
00000000  =00000091                 33  mmo_str     EQU         $91             * Hex value for MOVEM(Register to memory)
00000000  =00000099                 34  rmo_str     EQU         $99             * Hex value for MOVEM(Memory to register)
00000000  =00000009                 35  sub_str     EQU         $9              * Hex value for SUB
00000000  =00000005                 36  qsu_str     EQU         $5              * Hex value for SUBQ
00000000  =0000000C                 37  mul_str     EQU         $C              * Hex value for MULS
00000000  =00000008                 38  div_str     EQU         $8              * Hex value for DIVS (Look for 111 after the register)
00000000  =00000004                 39  lea_str     EQU         $4              * Hex value for LEA
00000000  =00000008                 40  or_str      EQU         $8              * Hex value for OR
00000000  =00000000                 41  ori_str     EQU         $00             * Hex value for ORI
00000000  =0000000B                 42  eor_str     EQU         $B              * Hex value for EOR
00000000  =0000000A                 43  eoi_str     EQU         $A              * Hex value for EORI
00000000  =0000000E                 44  shf_str     EQU         $E              * Hex value for Logical Shifts (Need to check the rest of the bits to determine which shift bits 4 and 3 are 1 0 if its a shift, 11 if a rotate)
00000000  =00000000                 45  bcl_str     EQU         $0              * Hex value for BCLR
00000000  =00002700                 46  EXIT        EQU         $2700           * Simulator Stop code
00000000                            47  
00000000                            48    
00000400                            49  START:   ORG         START
00000400  4DF8 6000                 50           LEA         start_addr,A6       * Store pattern to find     
00000404                            51  *         MOVE.L     #test_bit1,(A6)      * Store test bit  
00000404                            52  GET:       
00000404  3016                      53           MOVE.W      (A6),D0             * Move the entire line into D0
00000406  2400                      54           MOVE.L      D0,D2               * Save initial D0 for later use       
00000408                            55  *       bsr   Initialize_EA_Test_Pointer
00000408                            56    *----- bsr   NEG
00000408                            57   *           jsr         MOVE
00000408  B07C 4E71                 58  WORD:       CMP         #nop_str,D0     * is it NOP?
0000040C  6700 00DE                 59              BEQ         NOP_RT          * IF so, branch to NOP subroutine
00000410  B07C 4E75                 60              CMP         #rts_str,D0     * is it RTS?
00000414  6700 0112                 61              BEQ         RTS_RT          * If so, branch to RTS subroutine
00000418  3600                      62              MOVE.W      D0,D3
0000041A                            63              * ---CHECKING 12 BIT LONG OPCODES--- *            
0000041A  0203 00F0                 64              ANDI.B      #$F0,D3         * Clear very last digit
0000041E  E843                      65              ASR.W       #4,D3           * Shift remaining digits right 
00000420  B67C 013A                 66              CMP         #jsr_str,D3     * is it JSR?
00000424  6700 00EE                 67              BEQ         JSR_RT          * If so, branch to JSR subroutine
00000428                            68              
00000428                            69  
00000428  0242 FF00                 70  BYTE:       ANDI.W      #$FF00,D2       * Remove last 2 characters
0000042C  E04A                      71              LSR         #8,D2
0000042E  B47C 0065                 72              CMP         #bcs_str,D2     * is it BCS?
00000432  6700 0118                 73              BEQ         BCS_RT          * If so, branch to BCS subroutine
00000436  B47C 006C                 74              CMP         #bge_str,D2     * is it BGE?
0000043A  6700 0120                 75              BEQ         BGE_RT          * If so, branch to BGE subroutine
0000043E  B47C 006D                 76              CMP         #blt_str,D2     * is it BLT?
00000442  6700 0128                 77              BEQ         BLT_RT          * If so, branch to BLT subroutine
00000446  B47C 0068                 78              CMP         #bvc_str,D2     * is it BVC?
0000044A  6700 0130                 79              BEQ         BVC_RT          * If so, branch to BVC subroutine
0000044E  B47C 0060                 80              CMP         #bra_str,D2     * is it BRA?
00000452  6700 0138                 81              BEQ         BRA_RT          * If so, branch to BRA subroutine
00000456  B47C 0044                 82              CMP         #neg_str,D2     * is it NEG?
0000045A  6700 00A4                 83              BEQ         NEG_RT          * If so, branch to NEG subroutine            
0000045E  B47C 0091                 84              CMP         #mmo_str,D2     * is it MOVEM?
00000462  6700 0370                 85              BEQ         MMO_RT          * If so, branch to MOVEM subroutine            
00000466  B47C 0099                 86              CMP         #rmo_str,D2     * is it MOVEM?
0000046A  6700 0378                 87              BEQ         RMO_RT          * If so, branch to MOVEM subroutine            
0000046E  B47C 0000                 88              CMP         #ori_str,D2     * is it ORI?
00000472  6700 0390                 89              BEQ         ORI_RT          * If so, branch to ORI subroutine            
00000476                            90  
00000476                            91  
00000476                            92              
00000476                            93  
00000476  3400                      94  NIBBLE:     MOVE.W      D0,D2
00000478  0242 F000                 95              ANDI.W      #$F000,D2
0000047C  E082                      96              ASR.L       #8,D2
0000047E  E882                      97              ASR.L       #4,D2
00000480  0C42 000B                 98              CMPI        #eor_str,D2     * Is it EOR?
00000484  6700 0116                 99              BEQ         EOR_RT
00000488  0C42 000E                100              CMPI        #shf_str,D2     * Is it a shift?
0000048C  6700 0148                101              BEQ         SHF_RT                  
00000490  0C42 0004                102              CMPI        #lea_str,D2     * Is it LEA?
00000494  6700 0224                103              BEQ         FOU_RT                                           
00000498  0C42 0008                104              CMPI        #or_str,D2      * Is it OR?
0000049C  6700 0240                105              BEQ         OR_RT
000004A0  0C42 0000                106              CMPI        #bcl_str,D2     * Is it BCLR?
000004A4  6700 024C                107              BEQ         ZER_RT
000004A8  0C42 000D                108              CMPI        #add_str,D2     * Is it ADD?
000004AC  6700 0276                109              BEQ         ADD_RT
000004B0  0C42 0009                110              CMPI        #sub_str,D2     * Is it SUB?
000004B4  6700 027E                111              BEQ         SUB_RT
000004B8  0C42 000C                112              CMPI        #mul_str,D2     * Is it MULS?
000004BC  6700 0286                113              BEQ         MUL_RT
000004C0  0C42 0008                114              CMPI        #div_str,D2     * Is it DIVS?
000004C4  6700 028E                115              BEQ         DIV_RT
000004C8  0C42 0005                116              CMPI        #qsu_str,D2     * Is it SUBQ?
000004CC  6700 0326                117              BEQ         QSU_RT
000004D0  0C42 0001                118              CMPI        #bov_str,D2     * Is it MOVE.B?
000004D4  6700 028E                119              BEQ         BOV_RT
000004D8  0C42 0003                120              CMPI        #wov_str,D2     * Is it MOVE.W?
000004DC  6700 029A                121              BEQ         WOV_RT
000004E0  0C42 0002                122              CMPI        #lov_str,D2     * Is it MOVE.L?
000004E4  6700 02A6                123              BEQ         LOV_RT
000004E8  6000 032A                124              BRA         N_FOUND
000004EC                           125              
000004EC                           126              
000004EC  43F9 00000D4D            127  NOP_RT:     LEA         nop_message,A1  * Print NOP
000004F2  103C 000E                128              MOVE.B      #14,D0
000004F6  4E4F                     129              TRAP        #15
000004F8                           130              * Will branch to EA here
000004F8  6100 0674                131              BSR         NOP            
000004FC  6000 0326                132              BRA         FINISH
00000500  43F9 00000D52            133  NEG_RT:     LEA         neg_message,A1  * Print NEG
00000506  103C 000E                134              MOVE.B      #14,D0
0000050A  4E4F                     135              TRAP        #15
0000050C                           136              * Will branch to EA here
0000050C  6100 0662                137              BSR         NEG
00000510  6000 0312                138              BRA         FINISH
00000514  43F9 00000D57            139  JSR_RT:     LEA         jsr_message,A1  * Print JSR
0000051A  103C 000E                140              MOVE.B      #14,D0
0000051E  4E4F                     141              TRAP        #15
00000520                           142              * Will branch to EA here            
00000520  6100 07EC                143              BSR         JSR             * Branch to JSR EA Subroutine
00000524  6000 02FE                144              BRA         FINISH
00000528  43F9 00000D5C            145  RTS_RT:     LEA         rts_message,A1  * Print RTS
0000052E  103C 000E                146              MOVE.B      #14,D0
00000532  4E4F                     147              TRAP        #15
00000534                           148              * Will branch to EA here            
00000534  6100 07EE                149              BSR         RTS             * Branch to RTS EA Subroutine
00000538  6000 02EA                150              BRA         FINISH
0000053C  43F9 00000D61            151  BCC_RT:     LEA         bcc_message,A1  * Print BCC
00000542  103C 000E                152              MOVE.B      #14,D0
00000546  4E4F                     153              TRAP        #15
00000548                           154              * Will branch to EA here         
00000548  6000 02DA                155              BRA         FINISH
0000054C  43F9 00000D66            156  BCS_RT:     LEA         bcs_message,A1  * Print BCS
00000552  103C 000E                157              MOVE.B      #14,D0
00000556  4E4F                     158              TRAP        #15
00000558                           159              * Will branch to EA here         
00000558  6000 02CA                160              BRA         FINISH
0000055C  43F9 00000D6B            161  BGE_RT:     LEA         bge_message,A1  * Print BGE
00000562  103C 000E                162              MOVE.B      #14,D0
00000566  4E4F                     163              TRAP        #15
00000568                           164              * Will branch to EA here         
00000568  6000 02BA                165              BRA         FINISH
0000056C  43F9 00000D70            166  BLT_RT:     LEA         blt_message,A1  * Print BLT
00000572  103C 000E                167              MOVE.B      #14,D0
00000576  4E4F                     168              TRAP        #15
00000578                           169              * Will branch to EA here         
00000578  6000 02AA                170              BRA         FINISH
0000057C  43F9 00000D75            171  BVC_RT:     LEA         bvc_message,A1  * Print BVC
00000582  103C 000E                172              MOVE.B      #14,D0
00000586  4E4F                     173              TRAP        #15
00000588                           174              * Will branch to EA here         
00000588  6000 029A                175              BRA         FINISH                                                
0000058C  43F9 00000D7A            176  BRA_RT:     LEA         bra_message,A1  * Print BRA
00000592  103C 000E                177              MOVE.B      #14,D0
00000596  4E4F                     178              TRAP        #15
00000598                           179              * Will branch to EA here
00000598  6000 028A                180              BRA         FINISH                        
0000059C                           181             
0000059C  1602                     182  EOR_RT     MOVE.B      D2,D3           * Copy current string
0000059E  EC4B                     183             LSR         #6,D3           * Remove the last 6 bits from the string                   
000005A0  0203 000F                184             ANDI.B      #$0F,D3         * Clear second to last digit
000005A4  5143                     185             SUB         #8,D3           * Subtract 8 from string
000005A6  0C43 0004                186             CMPI        #4,D3           * Is is a CMP function? 
000005AA  6D00 0016                187             BLT         CMP_RT          * Branch to CMP routine
000005AE  43F9 00000D7F            188             LEA         eor_message,A1  * Otherwise it's an EOR function 
000005B4  103C 000E                189             MOVE.B      #14,D0
000005B8  4E4F                     190             TRAP        #15
000005BA  6100 06A0                191             BSR         EOR
000005BE  6000 0264                192             BRA         FINISH 
000005C2                           193             
000005C2  43F9 00000D84            194  CMP_RT     LEA         cmp_message,A1
000005C8  103C 000E                195             MOVE.B      #14,D0
000005CC  4E4F                     196             TRAP        #15
000005CE  6100 0700                197             BSR         CMP
000005D2  6000 0250                198             BRA         FINISH
000005D6                           199             
000005D6  3400                     200  SHF_RT      MOVE.W      D0,D2
000005D8  1602                     201              MOVE.B      D2,D3          * Copy string for manipulation
000005DA  1803                     202              MOVE.B      D3,D4          * Copy again 
000005DC  0204 000F                203              ANDI.B      #$0F,D4        * Clear second to last digit
000005E0  89FC 0008                204              DIVS        #8,D4          * Get the least significant bit
000005E4  0C44 0000                205              CMPI.W      #0,D4          * Is is zero?
000005E8  6700 0006                206              BEQ         AS_RT          * If so, its an Arithemetic shift
000005EC  6000 0040                207              BRA         LS_RT          * Otherwise, Logical Shift
000005F0                           208              
000005F0  1602                     209  AS_RT      MOVE.B       D2,D3          * Copy string 
000005F2  0202 0000                210             ANDI.B       #00,D2         * Clear second half of the byte
000005F6  E04A                     211             LSR          #8,D2          * Shift digits all the way right
000005F8  0202 000F                212             ANDI.B       #$0F,D2        * Clear second to last digit
000005FC  E24A                     213             LSR.W        #1,D2          * Shift one bit to the right
000005FE  6500 0006                214             BCS          LA_RT          * If it's even, we have ASL
00000602  6000 0016                215             BRA          RA_RT          * Otherwise, it's ASR
00000606                           216             
00000606  43F9 00000D8E            217  LA_RT     LEA           asl_message,A1
0000060C  103C 000E                218            MOVE.B        #14,D0
00000610  4E4F                     219            TRAP          #15
00000612  6100 0686                220            bsr           ROR
00000616  6000 020C                221            BRA           FINISH
0000061A                           222  
0000061A  43F9 00000D89            223  RA_RT     LEA           asr_message,A1
00000620  103C 000E                224            MOVE.B        #14,D0
00000624  4E4F                     225            TRAP          #15
00000626  6100 0672                226            bsr           ROR
0000062A  6000 01F8                227            BRA           FINISH
0000062E                           228              
0000062E                           229                         
0000062E  1E03                     230  LS_RT      MOVE.B       D3,D7          * Copy string to check if its a Rotate
00000630  0247 00F0                231             ANDI         #$F0,D7        * Clear last character
00000634  E84F                     232             LSR          #4,D7          * Shift 4 bits to the right
00000636  BE7C 0005                233             CMP          #5,D7          * If its a 5, we have a rotate
0000063A  6700 0040                234             BEQ          RO_RT          * Branch to Rotate
0000063E  1602                     235             MOVE.B       D2,D3          * Copy string 
00000640  0202 0000                236             ANDI.B       #00,D2         * Clear second half of the byte 
00000644  E04A                     237             LSR          #8,D2          * Shift digits all the way right
00000646  0202 000F                238             ANDI.B       #$0F,D2        * Clear second to last digit
0000064A  E24A                     239             LSR.W        #1,D2          * Shift least significant bit into the carry bit
0000064C  6500 0006                240             BCS          LL_RT          * If its the LSBit was 1, we have LSL
00000650  6000 0016                241             BRA          RL_RT          * Otherwise, its LSR
00000654                           242             
00000654  43F9 00000D98            243  LL_RT     LEA           lsl_message,A1
0000065A  103C 000E                244            MOVE.B        #14,D0
0000065E  4E4F                     245            TRAP          #15
00000660  6100 0638                246            bsr           ROR
00000664  6000 01BE                247            BRA           FINISH
00000668                           248  
00000668  43F9 00000D93            249  RL_RT     LEA           lsr_message,A1
0000066E  103C 000E                250            MOVE.B        #14,D0
00000672  4E4F                     251            TRAP          #15
00000674  6100 0624                252            bsr           ROR
00000678  6000 01AA                253            BRA           FINISH
0000067C                           254            
0000067C  1602                     255  RO_RT     MOVE.B       D2,D3          * Copy string 
0000067E  0202 0000                256            ANDI.B       #00,D2         * Clear second half of the byte 
00000682  E04A                     257            LSR          #8,D2          * Shift digits all the way right
00000684  0202 000F                258            ANDI.B       #$0F,D2        * Clear second to last digit
00000688  E24A                     259            LSR.W        #1,D2          * Shift least significant bit into the carry bit
0000068A  6500 0006                260            BCS          LR_RT          * If its the LSBit was 1, we have ROL
0000068E  6000 0016                261            BRA          RR_RT          * Otherwise, its ROR
00000692                           262  
00000692                           263            
00000692  43F9 00000D9D            264  LR_RT    LEA           rol_message,A1
00000698  103C 000E                265           MOVE.B        #14,D0
0000069C  4E4F                     266           TRAP          #15
0000069E  6100 05FA                267           bsr           ROR
000006A2  6000 0180                268           BRA           FINISH   
000006A6                           269  
000006A6  43F9 00000DA2            270  RR_RT    LEA           ror_message,A1
000006AC  103C 000E                271           MOVE.B        #14,D0
000006B0  4E4F                     272           TRAP          #15   
000006B2  6100 05E6                273           bsr           ROR
000006B6  6000 016C                274           BRA           FINISH
000006BA                           275  
000006BA  0243 00F0                276  FOU_RT   ANDI          #$0F0,D3        * Checking 2nd most significant nibble 
000006BE  E84B                     277           LSR.W         #4,D3           * Shift for consistency
000006C0  E20B                     278           LSR.B         #1,D3           * Shift 1 bit right to check parity bit
000006C2  6500 0006                279           BCS           LEA_RT          * If odd, its LEA
000006C6  6000 00F8                280           BRA           MM_RT           * Otherwise it's MOVEM
000006CA                           281           
000006CA                           282           
000006CA  43F9 00000DA7            283  LEA_RT   LEA           lea_message,A1
000006D0  103C 000E                284           MOVE.B        #14,D0
000006D4  4E4F                     285           TRAP          #15  
000006D6  6100 0538                286           BSR           LEA 
000006DA  6000 0148                287           BRA           FINISH
000006DE                           288            
000006DE  43F9 00000DAC            289  OR_RT    LEA           or_message,A1
000006E4  103C 000E                290           MOVE.B        #14,D0
000006E8  4E4F                     291           TRAP          #15  
000006EA  6100 054A                292           BSR           OR 
000006EE  6000 0134                293           BRA           FINISH
000006F2                           294           
000006F2  3200                     295  ZER_RT   MOVE.W        D0,D1           * Copy original string
000006F4  0241 FF00                296           ANDI.W        #$FF00,D1        * Clear the lower byte 
000006F8  E049                     297           LSR.W         #8,D1           * Shift for consistency
000006FA  E209                     298           LSR.B         #1,D1           * Move the lowest bit into the carry bit
000006FC  6500 0006                299           BCS           BCL_RT          * If its a 1, its BCLR 
00000700  6000 0012                300           BRA           ICM_RT          * Otherwise its CMPI
00000704                           301           
00000704  43F9 00000DB0            302  BCL_RT   LEA           bcl_message,A1
0000070A  103C 000E                303           MOVE.B        #14,D0
0000070E  4E4F                     304           TRAP          #15   
00000710  6000 0112                305           BRA           FINISH
00000714                           306  
00000714  43F9 00000E33            307  ICM_RT   LEA           icm_message,A1
0000071A  103C 000E                308           MOVE.B        #14,D0
0000071E  4E4F                     309           TRAP          #15   
00000720  6000 0102                310           BRA           FINISH
00000724                           311        
00000724                           312  
00000724  43F9 00000DB6            313  ADD_RT   LEA           add_message,A1
0000072A  103C 000E                314           MOVE.B        #14,D0
0000072E  4E4F                     315           TRAP          #15   
00000730  6000 00F2                316           BRA           FINISH
00000734                           317  
00000734  43F9 00000DBB            318  SUB_RT   LEA           sub_message,A1
0000073A  103C 000E                319           MOVE.B        #14,D0
0000073E  4E4F                     320           TRAP          #15   
00000740  6000 00E2                321           BRA           FINISH
00000744                           322           
00000744  43F9 00000DC0            323  MUL_RT   LEA           mul_message,A1
0000074A  103C 000E                324           MOVE.B        #14,D0
0000074E  4E4F                     325           TRAP          #15   
00000750  6000 00D2                326           BRA           FINISH
00000754                           327  
00000754  43F9 00000DC6            328  DIV_RT   LEA           div_message,A1
0000075A  103C 000E                329           MOVE.B        #14,D0
0000075E  4E4F                     330           TRAP          #15   
00000760  6000 00C2                331           BRA           FINISH
00000764                           332           
00000764  43F9 00000DCC            333  BOV_RT   LEA           bov_message,A1
0000076A  103C 000E                334           MOVE.B        #14,D0
0000076E  4E4F                     335           TRAP          #15   
00000770  6100 043C                336           BSR           MOVE
00000774  6000 00AE                337           BRA           FINISH
00000778                           338           
00000778                           339  WOV_RT   *MOVE          D0,D1           * Copy original string
00000778                           340  *         ANDI.W        #$0FF0,D1       * Clear top and bottom nibbles
00000778                           341  *         LSR.W         #4,D1           * Shift for consistency 
00000778                           342  *         LSR.B         #2,D1           * Shift last 2 bits out to check Destination mode 
00000778                           343  *         ANDI.B        #$0F,D1         * Clear top nibble of the last byte 
00000778                           344  *         CMPI.B        #1,D1           * If bottom nibble is 1, its MOVEA.W 
00000778                           345  *         BEQ           AWO_RT          * Branch to MOVEA.W routine 
00000778  43F9 00000DD2            346           LEA           wov_message,A1  * Other wise it's just MOVE.W
0000077E  103C 000E                347           MOVE.B        #14,D0
00000782  4E4F                     348           TRAP          #15   
00000784  6100 0428                349           BSR           MOVE
00000788  6000 009A                350           BRA           FINISH
0000078C                           351  
0000078C                           352           
0000078C                           353  LOV_RT   *MOVE          D0,D1           * Copy original string
0000078C                           354  *         ANDI.W        #$0FF0,D1       * Clear top and bottom nibbles
0000078C                           355  *         LSR.W         #4,D1           * Shift for consistency 
0000078C                           356  *         LSR.B         #2,D1           * Shift last 2 bits out to check Destination mode 
0000078C                           357  *         ANDI.B        #$0F,D1         * Clear top nibble of the last byte 
0000078C                           358  *         CMPI.B        #1,D1           * If bottom nibble is 1, its MOVEA.L 
0000078C                           359  *         BEQ           ALO_RT          * Branch to MOVEA.L routine 
0000078C  43F9 00000DD8            360           LEA           lov_message,A1  * Other wise it's just MOVE.L
00000792  103C 000E                361           MOVE.B        #14,D0
00000796  4E4F                     362           TRAP          #15   
00000798  6100 0414                363           BSR           MOVE
0000079C  6000 0086                364           BRA           FINISH
000007A0                           365           
000007A0  43F9 00000DDE            366  AWO_RT   LEA           awo_message,A1  
000007A6  103C 000E                367           MOVE.B        #14,D0
000007AA  4E4F                     368           TRAP          #15   
000007AC  6000 0076                369           BRA           FINISH
000007B0                           370  
000007B0  43F9 00000DE7            371  ALO_RT   LEA           alo_message,A1  
000007B6  103C 000E                372           MOVE.B        #14,D0
000007BA  4E4F                     373           TRAP          #15   
000007BC  6000 0066                374           BRA           FINISH
000007C0                           375           
000007C0  3200                     376  MM_RT    MOVE          D0,D1        * New copy of the original string
000007C2  0241 FF00                377           ANDI.W        #$FF00,D1    * Get the upper byte
000007C6  E049                     378           LSR.W         #8,D1        * Shift for consistency
000007C8  E409                     379           LSR.B         #2,D1        * Shift 2 bits first
000007CA  E209                     380           LSR.B         #1,D1        * Shift 1 more bit to check which MOVEM
000007CC  6500 0006                381           BCS           MMO_RT       * If the 10th bit is set, its a MOVEM from memory to register
000007D0  6000 0012                382           BRA           RMO_RT       * Otherwise, its a MOVEM from register to memory         
000007D4  43F9 00000DF0            383  MMO_RT   LEA           mmo_message,A1
000007DA  103C 000E                384           MOVE.B        #14,D0
000007DE  4E4F                     385           TRAP          #15   
000007E0  6000 0042                386           BRA           FINISH
000007E4                           387           
000007E4  43F9 00000E0C            388  RMO_RT   LEA           rmo_message,A1
000007EA  103C 000E                389           MOVE.B        #14,D0
000007EE  4E4F                     390           TRAP          #15   
000007F0  6000 0032                391           BRA           FINISH
000007F4                           392             
000007F4  43F9 00000E28            393  QSU_RT   LEA           qsu_message,A1
000007FA  103C 000E                394           MOVE.B        #14,D0
000007FE  4E4F                     395           TRAP          #15   
00000800  6000 0022                396           BRA           FINISH
00000804                           397           
00000804  43F9 00000E2E            398  ORI_RT   LEA           ori_message,A1
0000080A  103C 000E                399           MOVE.B        #14,D0
0000080E  4E4F                     400           TRAP          #15   
00000810  6000 0012                401           BRA           FINISH
00000814                           402               
00000814  43F9 00000D35            403  N_FOUND:    LEA         not_found,A1
0000081A  103C 000E                404              MOVE.B      #14,D0
0000081E  4E4F                     405              TRAP        #15
00000820  6000 0002                406              BRA         FINISH 
00000824                           407      
00000824  43F9 00000D2A            408  FINISH:     LEA         finished,A1
0000082A  103C 000E                409              MOVE.B      #14,D0
0000082E  4E4F                     410              TRAP        #15                       
00000830                           411  *            STOP        #EXIT           * Halt Execution            
00000830                           412     
00000830                           413     
00000830                           414     *bsr   EXIT_TEST
00000830                           415  *-----------------------
00000830                           416  EXIT_TEST
00000830  4E72 2700                417     STOP   #Exit
00000834                           418  *-----------------------
00000834                           419  Initialize_EA
00000834  49F9 00070000            420     lea   EAbuffer,A4 
0000083A  4E75                     421     rts
0000083C                           422  *------------------------ 
0000083C                           423  Initialize_EA_Test_Pointer
0000083C  4DF8 6000                424     lea   TestLoc,A6
00000840  4E75                     425     rts
00000842                           426  *------------------------  
00000842                           427  *  A4 points to the string 
00000842                           428  Print_EA_String
00000842  61F0                     429                  bsr   Initialize_EA
00000844  224C                     430               P_LOOP:   move.l      A4,A1
00000846  0C91 FFFFFFFF            431                  cmp.l       #$ffffffff,(A1)      if nothing there don't print     
0000084C  6700 000A                432                  beq         EXIT_SR              exit
00000850  700E                     433                  move.l      #14,D0
00000852  4E4F                     434                  trap        #15                  print 
00000854  588C                     435                  adda.l      #$00000004,A4        increment a4
00000856  60EC                     436                  bra         P_LOOP     loop
00000858                           437  *------------------------
00000858                           438  EXIT_SR
00000858  43F9 00000E3F            439     LEA      empty_lin,A1
0000085E  103C 000E                440     MOVE.B   #14,D0
00000862  4E4F                     441     TRAP     #15
00000864  4E75                     442     RTS
00000866                           443  *------------------------
00000866                           444  Decode_SIZE   *  register D3 has size bits
00000866                           445  *---   sizes are byte:00, word:01, long:10
00000866  B6BC 00000000            446      cmp.l   #$00000000,d3
0000086C  6700 0096                447      beq   PRINT_DOT_B
00000870  B6BC 00000001            448      cmp.l  #$00000001,d3
00000876  6700 009E                449      beq   Print_DOT_W
0000087A  B6BC 00000002            450      cmp.l   #$00000002,d3
00000880  6700 00A6                451      beq   Print_DOT_L
00000884  6000 0024                452      bra   ERROR_SIZE
00000888                           453  *------------------------
00000888                           454  Decode_Size_Two   *---used in move
00000888  B6BC 00000001            455      cmp.l   #$00000001,d3
0000088E  6700 0074                456      beq   PRINT_DOT_B
00000892  B6BC 00000003            457      cmp.l  #$00000003,d3
00000898  6700 007C                458      beq   Print_DOT_W
0000089C  B6BC 00000002            459      cmp.l   #$00000002,d3
000008A2  6700 0084                460      beq   Print_DOT_L
000008A6  6000 0002                461      bra   ERROR_SIZE
000008AA                           462  
000008AA                           463  *------------------------
000008AA                           464  ERROR_SIZE
000008AA  4E75                     465     rts 
000008AC                           466  *------------------------
000008AC                           467  *---- passes size back in d3
000008AC                           468  Grab_Size_Bits_Seven_Eight  *--- a6 points to where size bits
000008AC                           469      
000008AC                           470      *--- adda.l   #$00000002,a5    
000008AC  3616                     471      move.w    (a6),d3  
000008AE                           472      *-----adda.l   #$00000001,a6 
000008AE  0243 00C0                473      andi.w   #$00C0,d3  
000008B2  EC5B                     474      ror   #6,d3
000008B4  4E75                     475     rts  
000008B6                           476  *-----------------------
000008B6                           477  Grab_Six_And_Seven  
000008B6  3616                     478      move.w    (a6),d3 
000008B8  0243 0060                479      andi.w   #$0060,d3  
000008BC  EA5B                     480      ror   #5,d3
000008BE  4E75                     481     rts  
000008C0                           482  
000008C0                           483  *-----------------------
000008C0                           484  Grab_Eight
000008C0  4244                     485     clr   d4
000008C2  3816                     486     move.w    (a6),d4
000008C4  0244 0080                487      andi.w   #$0080,d4  
000008C8  EA5C                     488      ror   #5,d4
000008CA  4E75                     489     rts  
000008CC                           490  *-----------------------
000008CC                           491  Grab_Five
000008CC  3816                     492     move.w    (a6),d4
000008CE  0244 0010                493      andi.w   #$0010,d4  
000008D2  E85C                     494      ror   #4,d4
000008D4  4E75                     495     rts
000008D6                           496  *------------------------
000008D6                           497  Grab_Size_Bits_Two
000008D6  1616                     498     move.b   (a6),d3
000008D8  0203 0030                499     andi.b   #$30,d3
000008DC  EE5B                     500     ror   #7,d3
000008DE  4E75                     501     rts
000008E0                           502  
000008E0                           503  *------------------------
000008E0                           504  Grab_Mode_Bits *--- grabs mode bits and stores in d3
000008E0  4243                     505     clr   d3
000008E2  3616                     506     move.w   (a6),d3
000008E4  0243 0038                507     andi.w   #%0000000000111000,d3
000008E8  E65B                     508     ror   #3,d3
000008EA  4E75                     509     rts 
000008EC                           510  *------------------------
000008EC                           511  Grab_Dest_Mode_Bits
000008EC  4243                     512     clr   d3
000008EE  3616                     513     move.w   (a6),d3
000008F0  0243 01C0                514     andi.w   #%0000000111000000,d3
000008F4  EC5B                     515     ror   #6,d3
000008F6  4E75                     516     rts
000008F8                           517  *------------------------
000008F8                           518  Grab_Source_Mode_Bits
000008F8  4243                     519     clr   d3
000008FA  3616                     520     move.w   (a6),d3
000008FC  0243 0038                521     andi.w   #%00000000000111000,d3
00000900  E65B                     522     ror   #3,d3
00000902  4E75                     523     rts
00000904                           524  *------------------------
00000904                           525  PRINT_DOT_B
00000904  18FC 002E                526     move.b   #'.',(a4)+       dot to print
00000908  18FC 0042                527     move.b   #'B',(a4)+       "B" to print 
0000090C  18FC 0009                528     move.b   #$09,(a4)+       prints spaces 
00000910  18FC 0000                529     move.b   #$00,(a4)+
00000914  4E75                     530     rts
00000916                           531  *------------------------
00000916                           532  Print_DOT_W
00000916  18FC 002E                533     move.b   #'.',(a4)+      dot to print
0000091A  18FC 0057                534     move.b   #'W',(a4)+      "W" to print   
0000091E  18FC 0009                535     move.b   #$09,(a4)+      prints spaces   
00000922  18FC 0000                536     move.b   #$00,(a4)+
00000926  4E75                     537     rts
00000928                           538  *------------------------
00000928                           539  Print_DOT_L
00000928  18FC 002E                540     move.b   #'.',(a4)+      dot to print
0000092C  18FC 004C                541     move.b   #'L',(a4)+      "W" to print 
00000930  18FC 0009                542     move.b   #$09,(a4)+      prints spaces
00000934  18FC 0000                543     move.b   #$00,(a4)+
00000938  4E75                     544     rts
0000093A                           545  *------------------------
0000093A                           546  Print_Comma
0000093A  18FC 002C                547     move.b   #',',(a4)+
0000093E  18FC 0000                548     move.b   #$00,(a4)+
00000942  18FC 0000                549     move.b   #$00,(a4)+
00000946  18FC 0000                550     move.b   #$00,(a4)+
0000094A  4E75                     551     rts
0000094C                           552  *------------------------
0000094C                           553  Grab_Source_Reg  *--- grabs and puts into d4
0000094C  4244                     554     clr   d4
0000094E  3816                     555     move.w  (a6),d4 
00000950  0244 0007                556     andi.w   #%0000000000000111,d4
00000954  4E75                     557     rts
00000956                           558  
00000956                           559  *------------------------
00000956                           560  Grab_Dest_Reg   *--- grabs and puts into d4
00000956  4244                     561     clr   d4
00000958  3816                     562     move.w  (a6),d4 
0000095A  0244 0E00                563     andi.w   #%0000111000000000,d4
0000095E  E05C                     564     ror   #8,d4
00000960  E25C                     565     ror   #1,d4
00000962  4E75                     566     rts
00000964                           567  *------------------------
00000964                           568  Close_String
00000964  18BC 0000                569     move.b   #$00,(a4)
00000968  4E75                     570     rts
0000096A                           571  *------------------------
0000096A                           572  Decode_DRD  *-- d4 has the reg
0000096A  0604 0030                573     addi.b   #$30,d4
0000096E  18FC 0044                574     move.b   #'D',(a4)+
00000972  18C4                     575     move.b   d4,(a4)+
00000974  18FC 0000                576     move.b   #$00,(a4)+
00000978  18FC 0000                577     move.b   #$00,(a4)+
0000097C  4E75                     578     rts
0000097E                           579  *------------------------
0000097E                           580  Decode_ARD  *-- d4 has the reg
0000097E  0604 0030                581     addi.b   #$30,d4
00000982  18FC 0041                582     move.b   #'A',(a4)+
00000986  18C4                     583     move.b   d4,(a4)+
00000988  18FC 0000                584     move.b   #$00,(a4)+
0000098C  18FC 0000                585     move.b   #$00,(a4)+
00000990  4E75                     586     rts
00000992                           587  
00000992                           588  *------------------------
00000992                           589  Mode_Jump_Table *-- d3 has mode 
00000992  B63C 0000                590      cmp.b   #$00,d3     *drd
00000996  67D2                     591      beq   Decode_DRD
00000998  B63C 0001                592      cmp.b   #$01,d3
0000099C  67E0                     593      beq   Decode_ARD
0000099E  B63C 0002                594      cmp.b   #$02,d3      *ari
000009A2  6700 001E                595      beq   Decode_ARI
000009A6  B63C 0003                596      cmp.b   #$03,d3     *ari pi
000009AA  6700 002E                597      beq   Decode_ARI_PI
000009AE  B63C 0004                598      cmp.b   #$04,d3     *ari pd
000009B2  6700 004A                599      beq   Decode_ARI_PD
000009B6  B63C 0007                600      cmp.b   #$07,d3      *ari
000009BA  6700 011E                601      beq     Absolute_Router
000009BE  6000 001A                602      bra   Mode_Error 
000009C2                           603  *------------------------
000009C2                           604  Decode_ARI
000009C2  0604 0030                605      addi.b   #$30,d4
000009C6  18FC 0028                606      move.b   #'(',(a4)+
000009CA  18FC 0041                607      move.b   #'A',(a4)+
000009CE  18C4                     608      move.b   d4,(a4)+
000009D0  18FC 0029                609      move.b   #')',(a4)+
000009D4  18FC 0000                610      move.b   #$00,(a4)+
000009D8                           611    
000009D8  4E75                     612     rts
000009DA                           613  *------------------------
000009DA                           614  Mode_Error
000009DA                           615  
000009DA                           616  *------------------------
000009DA                           617  Decode_ARI_PI
000009DA                           618      
000009DA  0604 0030                619      addi.b   #$30,d4
000009DE  18FC 0028                620      move.b   #'(',(a4)+
000009E2  18FC 0041                621      move.b   #'A',(a4)+
000009E6  18C4                     622      move.b   d4,(a4)+
000009E8  18FC 0000                623      move.b   #$00,(a4)+
000009EC  18FC 0029                624      move.b   #')',(a4)+
000009F0  18FC 002B                625      move.b   #'+',(a4)+
000009F4  18FC 0000                626      move.b   #$00,(a4)+
000009F8  18FC 0000                627      move.b   #$00,(a4)+
000009FC  4E75                     628      rts
000009FE                           629  
000009FE                           630  
000009FE                           631  *------------------------
000009FE                           632  Decode_ARI_PD
000009FE                           633      
000009FE  0604 0030                634      addi.b   #$30,d4
00000A02  18FC 002D                635      move.b   #'-',(a4)+
00000A06  18FC 0028                636      move.b   #'(',(a4)+
00000A0A  18FC 0041                637      move.b   #'A',(a4)+
00000A0E  18FC 0000                638      move.b   #$00,(a4)+
00000A12  18C4                     639      move.b   d4,(a4)+
00000A14  18FC 0029                640      move.b   #')',(a4)+
00000A18  18FC 0000                641      move.b   #$00,(a4)+
00000A1C  18FC 0000                642      move.b   #$00,(a4)+
00000A20  4E75                     643      rts
00000A22                           644  *------------------------
00000A22                           645  Decode_IMM
00000A22                           646  
00000A22                           647  
00000A22                           648  
00000A22                           649  
00000A22                           650  *------------------------
00000A22                           651  Decode_ABS_LONG    *---code reuse, will make separate procudure if time 
00000A22  4241                     652     clr   d1
00000A24  4242                     653     clr   d2
00000A26  4243                     654     clr   d3
00000A28  4244                     655     clr   d4
00000A2A  4245                     656     clr   d5
00000A2C  524E                     657     adda.w   #$1,a6
00000A2E  361E                     658     move.w   (a6)+,d3
00000A30  3803                     659     move.w   d3,d4
00000A32  3403                     660     move.w   d3,d2
00000A34  3A03                     661     move.w   d3,d5
00000A36  3203                     662     move.w   d3,d1
00000A38  0282 0000F000            663     andi.l   #$0000F000,d2
00000A3E  E05A                     664     ror      #8,d2
00000A40  E85A                     665     ror      #4,d2
00000A42                           666     
00000A42  0602 0030                667     addi.b   #$30,d2
00000A46  0283 00000F00            668     andi.l   #$00000F00,d3
00000A4C  E05B                     669     ror      #8,d3
00000A4E  0603 0030                670     addi.b   #$30,d3
00000A52  0284 000000F0            671     andi.l   #$000000F0,d4
00000A58  E85C                     672     ror      #4,d4
00000A5A  0604 0030                673     addi.b   #$30,d4
00000A5E  0285 0000000F            674     andi.l   #$0000000F,d5
00000A64  0605 0030                675     addi.b   #$30,d5
00000A68  28FC 61622E6C            676     move.l   #'ab.l',(a4)+
00000A6E  28FC 00000000            677     move.l   #$00000000,(a4)+
00000A74  18C2                     678     move.b   d2,(a4)+
00000A76  18C3                     679     move.b   d3,(a4)+
00000A78  38FC 0000                680     move.w   #$0000,(a4)+
00000A7C  18C4                     681     move.b   d4,(a4)+
00000A7E  18C5                     682     move.b   d5,(a4)+
00000A80  38FC 0000                683     move.w   #$0000,(a4)+
00000A84                           684     
00000A84                           685     
00000A84                           686     
00000A84  4241                     687     clr   d1
00000A86  4242                     688     clr   d2
00000A88  4243                     689     clr   d3
00000A8A  4244                     690     clr   d4
00000A8C  4245                     691     clr   d5
00000A8E  361E                     692     move.w   (a6)+,d3
00000A90  3803                     693     move.w   d3,d4
00000A92  3403                     694     move.w   d3,d2
00000A94  3A03                     695     move.w   d3,d5
00000A96  3203                     696     move.w   d3,d1
00000A98  0282 0000F000            697     andi.l   #$0000F000,d2
00000A9E  E05A                     698     ror      #8,d2
00000AA0  E85A                     699     ror      #4,d2
00000AA2                           700     
00000AA2  0602 0030                701     addi.b   #$30,d2
00000AA6  0283 00000F00            702     andi.l   #$00000F00,d3
00000AAC  E05B                     703     ror      #8,d3
00000AAE  0603 0030                704     addi.b   #$30,d3
00000AB2  0284 000000F0            705     andi.l   #$000000F0,d4
00000AB8  E85C                     706     ror      #4,d4
00000ABA  0604 0030                707     addi.b   #$30,d4
00000ABE  0285 0000000F            708     andi.l   #$0000000F,d5
00000AC4  0605 0030                709     addi.b   #$30,d5
00000AC8  18C2                     710     move.b   d2,(a4)+
00000ACA  18C3                     711     move.b   d3,(a4)+
00000ACC  38FC 0000                712     move.w   #$0000,(a4)+
00000AD0  18C4                     713     move.b   d4,(a4)+
00000AD2  18C5                     714     move.b   d5,(a4)+
00000AD4  38FC 0000                715     move.w   #$0000,(a4)+
00000AD8  4E75                     716     rts
00000ADA                           717     
00000ADA                           718  
00000ADA                           719  *------------------------
00000ADA                           720  Absolute_Router  *-- branches to word or long subprocedures based on register info 
00000ADA  4243                     721      clr      d3
00000ADC  161E                     722      move.b   (a6)+,d3
00000ADE  0203 0007                723      andi.b   #%00000111,d3  grabs the register
00000AE2  B63C 0000                724      cmp.b   #$00,d3
00000AE6  6700 000E                725      beq   DECODE_ABS_WORD
00000AEA  B63C 0001                726      cmp.b   #$01,d3
00000AEE  6700 FF32                727      beq   DECODE_ABS_LONG
00000AF2  6000 0066                728      bra   Absolute_Error
00000AF6                           729  *------------------------
00000AF6                           730  DECODE_ABS_WORD
00000AF6  4241                     731     clr   d1
00000AF8  4242                     732     clr   d2
00000AFA  4243                     733     clr   d3
00000AFC  4244                     734     clr   d4
00000AFE  4245                     735     clr   d5
00000B00  524E                     736     adda.w   #1,a6
00000B02  361E                     737     move.w   (a6)+,d3
00000B04  3803                     738     move.w   d3,d4
00000B06  3403                     739     move.w   d3,d2
00000B08  3A03                     740     move.w   d3,d5
00000B0A  3203                     741     move.w   d3,d1
00000B0C  0282 0000F000            742     andi.l   #$0000F000,d2
00000B12  E05A                     743     ror      #8,d2
00000B14  E85A                     744     ror      #4,d2
00000B16                           745     
00000B16  0602 0030                746     addi.b   #$30,d2
00000B1A  0283 00000F00            747     andi.l   #$00000F00,d3
00000B20  E05B                     748     ror      #8,d3
00000B22  0603 0030                749     addi.b   #$30,d3
00000B26  0284 000000F0            750     andi.l   #$000000F0,d4
00000B2C  E85C                     751     ror      #4,d4
00000B2E  0604 0030                752     addi.b   #$30,d4
00000B32  0285 0000000F            753     andi.l   #$0000000F,d5
00000B38  0605 0030                754     addi.b   #$30,d5
00000B3C  28FC 61622E77            755     move.l   #'ab.w',(a4)+
00000B42  28FC 00000000            756     move.l   #$00000000,(a4)+
00000B48  18C2                     757     move.b   d2,(a4)+
00000B4A  18C3                     758     move.b   d3,(a4)+
00000B4C  38FC 0000                759     move.w   #$0000,(a4)+
00000B50  18C4                     760     move.b   d4,(a4)+
00000B52  18C5                     761     move.b   d5,(a4)+
00000B54  38FC 0000                762     move.w   #$0000,(a4)+
00000B58  4E75                     763     rts
00000B5A                           764  *------------------------
00000B5A                           765  Absolute_Error
00000B5A                           766  
00000B5A                           767  *------------------------
00000B5A                           768  Decode_Number
00000B5A  0604 0030                769     addi.b   #$30,d4
00000B5E  18FC 0023                770     move.b   #'#',(a4)+
00000B62  18C4                     771     move.b   d4,(a4)+
00000B64  18FC 0000                772     move.b   #$00,(a4)+
00000B68  18FC 0000                773     move.b   #$00,(a4)+
00000B6C                           774      
00000B6C  4E75                     775     rts
00000B6E                           776  
00000B6E                           777  *------------------------
00000B6E                           778  NOP
00000B6E  4E75                     779     rts
00000B70                           780  *------------------------
00000B70                           781  NEG
00000B70  6100 FCC2                782     bsr   Initialize_EA
00000B74  6100 FD36                783     bsr   Grab_Size_Bits_Seven_Eight
00000B78  6100 FCEC                784     bsr   Decode_SIZE
00000B7C  6100 FD62                785     bsr   Grab_Mode_Bits
00000B80  6100 FDCA                786     bsr   Grab_Source_reg
00000B84  6100 FE0C                787     bsr   Mode_Jump_Table
00000B88  6100 FCB8                788     bsr   Print_EA_String
00000B8C  4E75                     789     rts
00000B8E                           790  
00000B8E                           791  *------------------------
00000B8E                           792  Determine_MOVEA
00000B8E  6100 FD5C                793     bsr   Grab_Dest_Mode_Bits
00000B92  B63C 0001                794     cmp.b  #$1,d3
00000B96  6700 0004                795     beq   Print_A
00000B9A  4E75                     796     rts
00000B9C                           797  *------------------------
00000B9C                           798  Print_A
00000B9C  18FC 0041                799     move.b   #'A',(a4)+
00000BA0  18FC 0000                800     move.b   #$00,(a4)+
00000BA4  18FC 0000                801     move.b   #$00,(a4)+
00000BA8  18FC 0000                802     move.b   #$00,(a4)+
00000BAC  4E75                     803     rts 
00000BAE                           804  *------------------------
00000BAE                           805  MOVE:
00000BAE  6100 FC84                806     bsr   Initialize_EA
00000BB2  61DA                     807     bsr   Determine_MOVEA
00000BB4  6100 FD20                808     bsr   Grab_Size_Bits_Two
00000BB8  6100 FCCE                809     bsr   Decode_SIZE_Two
00000BBC  6100 FD3A                810     bsr   Grab_Source_Mode_Bits
00000BC0  6100 FD8A                811     bsr   Grab_Source_Reg
00000BC4  6100 FDCC                812     bsr   Mode_Jump_Table
00000BC8  6100 FD70                813     bsr   Print_Comma
00000BCC  6100 FD1E                814     bsr   Grab_Dest_Mode_Bits
00000BD0  6100 FD84                815     bsr   Grab_Dest_reg 
00000BD4  6100 FDBC                816     bsr   Mode_Jump_Table
00000BD8  6100 FC68                817     bsr   Print_EA_String
00000BDC                           818  *B   adda.w   #$2,a6
00000BDC  4E75                     819     rts
00000BDE                           820  *------------------------
00000BDE                           821  
00000BDE                           822  
00000BDE                           823  *------------------------
00000BDE                           824  MOVEM
00000BDE                           825  *------------------------
00000BDE                           826  ADD
00000BDE  6100 FC54                827     bsr   Initialize_EA
00000BE2                           828     
00000BE2  6100 FD68                829     bsr   Grab_Source_Reg
00000BE6  6100 FF72                830     bsr   Decode_Number
00000BEA  6100 FD4E                831     bsr   Print_Comma
00000BEE  6100 FD66                832     bsr   Grab_Dest_reg 
00000BF2  6100 FCF8                833     bsr   Grab_Dest_Mode_Bits
00000BF6  6100 FD9A                834     bsr   Mode_Jump_Table
00000BFA                           835  
00000BFA  6100 FC46                836     bsr   Print_EA_String
00000BFE  4E75                     837     rts
00000C00                           838  *------------------------
00000C00                           839  ADDA
00000C00                           840     
00000C00  61DC                     841     bsr   ADD
00000C02  4E75                     842     rts
00000C04                           843  
00000C04                           844  *------------------------
00000C04                           845  SUB
00000C04  61D8                     846     bsr   ADD
00000C06  4E75                     847     rts
00000C08                           848  *------------------------
00000C08                           849  MULS
00000C08  61D4                     850     bsr   ADD
00000C0A  4E75                     851     rts
00000C0C                           852  *------------------------
00000C0C                           853  DIVS
00000C0C  61D0                     854     bsr   ADD
00000C0E  4E75                     855     rts
00000C10                           856  *------------------------
00000C10                           857  LEA:
00000C10  6100 FC22                858     bsr   Initialize_EA 
00000C14  6100 FD36                859     bsr   Grab_Source_Reg
00000C18  6100 FCDE                860     bsr   Grab_Source_Mode_Bits
00000C1C  6100 FD74                861     bsr   Mode_Jump_Table
00000C20  6100 FD18                862     bsr   Print_Comma
00000C24  6100 FD30                863     bsr   Grab_Dest_reg 
00000C28  6100 FCC2                864     bsr   Grab_Dest_Mode_Bits
00000C2C  6100 FD64                865     bsr   Mode_Jump_Table
00000C30  6100 FC10                866     bsr   Print_EA_String
00000C34  4E75                     867     rts
00000C36                           868  
00000C36                           869  *------------------------
00000C36                           870  OR:
00000C36  6100 FBFC                871     bsr   Initialize_EA 
00000C3A  6100 FD10                872     bsr   Grab_Source_Reg
00000C3E  6100 FCB8                873     bsr   Grab_Source_Mode_Bits
00000C42  6100 FD4E                874     bsr   Mode_Jump_Table
00000C46  6100 FCF2                875     bsr   Print_Comma
00000C4A  6100 FCA0                876     bsr   Grab_Dest_Mode_Bits
00000C4E  6100 FD06                877     bsr   Grab_Dest_reg 
00000C52  6100 FD16                878     bsr   Decode_DRD         * CMP requires that the register specified by bits 11, 10, and 9 be data register direct
00000C56  6100 FBEA                879     bsr   Print_EA_String
00000C5A  4E75                     880     rts
00000C5C                           881  
00000C5C                           882  * IT LOOKS LIKE ADDRESS_REGISTER_INDIRECT CAUSES AN EXTRA COMMA TO BE PRINTED * 
00000C5C                           883  *------------------------
00000C5C                           884  ORI
00000C5C                           885  *------------------------
00000C5C                           886  EOR:
00000C5C  6100 FBD6                887     bsr   Initialize_EA 
00000C60  6100 FCEA                888     bsr   Grab_Source_Reg
00000C64  6100 FC92                889     bsr   Grab_Source_Mode_Bits
00000C68  6100 FD28                890     bsr   Mode_Jump_Table
00000C6C  6100 FCCC                891     bsr   Print_Comma
00000C70  6100 FC7A                892     bsr   Grab_Dest_Mode_Bits
00000C74  6100 FCE0                893     bsr   Grab_Dest_reg 
00000C78  6100 FCF0                894     bsr   Decode_DRD         * CMP requires that the register specified by bits 11, 10, and 9 be data register direct
00000C7C  6100 FBC4                895     bsr   Print_EA_String
00000C80  4E75                     896     rts
00000C82                           897      
00000C82                           898  *------------------------
00000C82                           899  LSR
00000C82  6100 001C                900     bsr   Register_EA
00000C86  4E75                     901     rts
00000C88                           902  
00000C88                           903  *------------------------
00000C88                           904  LSL
00000C88  6100 0016                905     bsr   Register_EA
00000C8C  4E75                     906     rts
00000C8E                           907  *------------------------
00000C8E                           908  ASR
00000C8E  6100 0010                909     bsr   Register_EA
00000C92  4E75                     910     rts
00000C94                           911  *------------------------
00000C94                           912  ROL
00000C94  6100 000A                913     bsr   Register_EA
00000C98  4E75                     914     rts
00000C9A                           915  *------------------------
00000C9A                           916  ROR
00000C9A  6100 0004                917     bsr   Register_EA
00000C9E  4E75                     918     rts
00000CA0                           919  *-------------------------
00000CA0                           920  Register_EA
00000CA0                           921  *   bsr   Initialize_EA 
00000CA0                           922  *   bsr   Grab_Dest_reg *grab destination reg 
00000CA0                           923  *   bsr   Decode_DRD 
00000CA0                           924  *   bsr   Print_Comma
00000CA0                           925  *   bsr   Grab_Source_Reg
00000CA0                           926  *   bsr   Grab_Source_Mode_Bits
00000CA0                           927  *   bsr   Mode_Jump_Table
00000CA0                           928  *   bsr   Print_EA_String
00000CA0                           929  *   rts
00000CA0                           930  
00000CA0  6100 FB92                931     bsr   Initialize_EA
00000CA4  6100 FC1A                932     bsr   Grab_Eight
00000CA8  B83C 0000                933     cmp.b   #$00,d4
00000CAC  6E00 001C                934     bgt  Register_EA_D  *its a register not an immediate
00000CB0  6100 FCA4                935     bsr   Grab_Dest_Reg 
00000CB4  6100 FEA4                936     bsr   Decode_Number
00000CB8  6100 FC80                937     bsr   Print_Comma
00000CBC  6100 FC8E                938     bsr   Grab_Source_Reg
00000CC0  6100 FCA8                939     bsr   Decode_DRD  
00000CC4  6100 FB7C                940     bsr   Print_EA_String
00000CC8                           941  *B   adda.w   #$2,a6
00000CC8  4E75                     942     rts
00000CCA                           943  
00000CCA                           944  *B   adda.w   #$2,a6
00000CCA                           945  Register_EA_D
00000CCA                           946  
00000CCA  6100 FC9E                947      bsr   Decode_DRD
00000CCE  4E75                     948      rts
00000CD0                           949      
00000CD0                           950     
00000CD0                           951  
00000CD0                           952  
00000CD0                           953  *------------------------
00000CD0                           954  BCLR
00000CD0                           955  *------------------------
00000CD0                           956  CMP:
00000CD0  6100 FB62                957     bsr   Initialize_EA 
00000CD4  6100 FC76                958     bsr   Grab_Source_Reg
00000CD8  6100 FC1E                959     bsr   Grab_Source_Mode_Bits
00000CDC  6100 FCB4                960     bsr   Mode_Jump_Table
00000CE0  6100 FC58                961     bsr   Print_Comma
00000CE4  6100 FC06                962     bsr   Grab_Dest_Mode_Bits
00000CE8  6100 FC6C                963     bsr   Grab_Dest_reg 
00000CEC  6100 FC7C                964     bsr   Decode_DRD         * CMP requires that the register specified by bits 11, 10, and 9 be data register direct
00000CF0  6100 FB50                965     bsr   Print_EA_String
00000CF4  4E75                     966     rts
00000CF6                           967     * NOTE: THIS SUBROUTINE HAS AN EXTRA COMMA IN THE EA STRING FOR SOME REASON *
00000CF6                           968  
00000CF6                           969  *------------------------
00000CF6                           970  CMPI
00000CF6  6100 FB3C                971     bsr   Initialize_EA 
00000CFA  6100 FBB0                972     bsr   Grab_Size_Bits_Seven_Eight
00000CFE  6100 FB66                973     bsr   Decode_SIZE
00000D02                           974     
00000D02  6100 000A                975     bsr   JSR
00000D06                           976        *   d3 has size, grab immediate based on what it is 
00000D06  6100 FDD2                977     bsr  Absolute_Router   *this will at least do words and longs similarly 
00000D0A  6100 FB36                978     bsr   Print_EA_String
00000D0E                           979     
00000D0E                           980  
00000D0E                           981  *------------------------
00000D0E                           982  BCS
00000D0E                           983  *------------------------
00000D0E                           984  BGE
00000D0E                           985  *------------------------
00000D0E                           986  BLT
00000D0E                           987  *------------------------
00000D0E                           988  BVC
00000D0E                           989  *------------------------
00000D0E                           990  JSR
00000D0E  6100 FB24                991      bsr   Initialize_EA 
00000D12  6100 FC38                992      bsr   Grab_Source_Reg
00000D16  6100 FBE0                993      bsr   Grab_Source_Mode_Bits
00000D1A  6100 FC76                994      bsr   Mode_Jump_Table
00000D1E  6100 FB22                995      bsr   Print_EA_String
00000D22  4E75                     996      RTS
00000D24                           997  *------------------------
00000D24                           998  RTS
00000D24  6100 FB32                999      BSR EXIT_SR
00000D28  4E75                    1000      RTS
00000D2A                          1001  *------------------------
00000D2A                          1002  
00000D2A                          1003  
00000D2A                          1004  
00000D2A                          1005  *------------------
00000D2A                          1006  * Data Section |
00000D2A                          1007  *------------------
00000D2A                          1008  
00000D2A= 46 69 6E 69 73 68 ...   1009  finished    DC.B        'Finished',CR,LF,0
00000D35= 4E 6F 20 4F 70 63 ...   1010  not_found   DC.B        'No Opcodes were found',CR,LF,0
00000D4D= 4E 4F 50 20 00          1011  nop_message DC.B        'NOP ',0
00000D52= 4E 45 47 20 00          1012  neg_message DC.B        'NEG ',0
00000D57= 4A 53 52 20 00          1013  jsr_message DC.B        'JSR ',0
00000D5C= 52 54 53 20 00          1014  rts_message DC.B        'RTS ',0
00000D61= 42 43 43 20 00          1015  bcc_message DC.B        'BCC ',0
00000D66= 42 43 53 20 00          1016  bcs_message DC.B        'BCS ',0
00000D6B= 42 47 45 20 00          1017  bge_message DC.B        'BGE ',0
00000D70= 42 4C 54 20 00          1018  blt_message DC.B        'BLT ',0
00000D75= 42 56 43 20 00          1019  bvc_message DC.B        'BVC ',0
00000D7A= 42 52 41 20 00          1020  bra_message DC.B        'BRA ',0
00000D7F= 45 4F 52 20 00          1021  eor_message DC.B        'EOR ',0
00000D84= 43 4D 50 20 00          1022  cmp_message DC.B        'CMP ',0
00000D89= 41 53 52 20 00          1023  asr_message DC.B        'ASR ',0
00000D8E= 41 53 4C 20 00          1024  asl_message DC.B        'ASL ',0
00000D93= 4C 53 52 20 00          1025  lsr_message DC.B        'LSR ',0
00000D98= 4C 53 4C 20 00          1026  lsl_message DC.B        'LSL ',0
00000D9D= 52 4F 4C 20 00          1027  rol_message DC.B        'ROL ',0
00000DA2= 52 4F 52 20 00          1028  ror_message DC.B        'ROR ',0
00000DA7= 4C 45 41 20 00          1029  lea_message DC.B        'LEA ',0
00000DAC= 4F 52 20 00             1030  or_message DC.B         'OR ',0
00000DB0= 42 43 4C 52 20 00       1031  bcl_message DC.B        'BCLR ',0
00000DB6= 41 44 44 20 00          1032  add_message DC.B        'ADD ',0
00000DBB= 53 55 42 20 00          1033  sub_message DC.B        'SUB ',0
00000DC0= 4D 55 4C 53 20 00       1034  mul_message DC.B        'MULS ',0
00000DC6= 44 49 56 53 20 00       1035  div_message DC.B        'DIVS ',0
00000DCC= 4D 4F 56 45 20 00       1036  bov_message DC.B        'MOVE ',0
00000DD2= 4D 4F 56 45 20 00       1037  wov_message DC.B        'MOVE ',0
00000DD8= 4D 4F 56 45 20 00       1038  lov_message DC.B        'MOVE ',0
00000DDE= 4D 4F 56 45 41 2E ...   1039  awo_message DC.B        'MOVEA.W ',0
00000DE7= 4D 4F 56 45 41 2E ...   1040  alo_message DC.B        'MOVEA.L ',0
00000DF0= 4D 4F 56 45 4D 20 ...   1041  mmo_message DC.B        'MOVEM (Memory to Register) ',0
00000E0C= 4D 4F 56 45 4D 20 ...   1042  rmo_message DC.B        'MOVEM (Register to Memory) ',0
00000E28= 53 55 42 51 20 00       1043  qsu_message DC.B        'SUBQ ',0
00000E2E= 4F 52 49 20 00          1044  ori_message DC.B        'ORI ',0
00000E33= 43 4D 50 49 20 00       1045  icm_message DC.B        'CMPI ',0
00000E39= 44 41 54 41 20 00       1046  data        DC.B        'DATA ',0 
00000E3F= 0D 0A 00                1047  empty_lin   DC.B        '',CR,LF,0   
00000E42                          1048  
00000E42                          1049  
00000E42                          1050              END         START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_ERROR      B5A
ABSOLUTE_ROUTER     ADA
ADD                 BDE
ADDA                C00
ADD_MESSAGE         DB6
ADD_RT              724
ADD_STR             D
ALO_MESSAGE         DE7
ALO_RT              7B0
ASL_MESSAGE         D8E
ASR                 C8E
ASR_MESSAGE         D89
AS_RT               5F0
AWO_MESSAGE         DDE
AWO_RT              7A0
BCC_MESSAGE         D61
BCC_RT              53C
BCLR                CD0
BCL_MESSAGE         DB0
BCL_RT              704
BCL_STR             0
BCS                 D0E
BCS_MESSAGE         D66
BCS_RT              54C
BCS_STR             65
BGE                 D0E
BGE_MESSAGE         D6B
BGE_RT              55C
BGE_STR             6C
BLT                 D0E
BLT_MESSAGE         D70
BLT_RT              56C
BLT_STR             6D
BOV_MESSAGE         DCC
BOV_RT              764
BOV_STR             1
BRA_MESSAGE         D7A
BRA_RT              58C
BRA_STR             60
BVC                 D0E
BVC_MESSAGE         D75
BVC_RT              57C
BVC_STR             68
BYTE                428
CLOSE_STRING        964
CMP                 CD0
CMPI                CF6
CMP_MESSAGE         D84
CMP_RT              5C2
CR                  D
DATA                E39
DECODE_ABS_LONG     A22
DECODE_ABS_WORD     AF6
DECODE_ARD          97E
DECODE_ARI          9C2
DECODE_ARI_PD       9FE
DECODE_ARI_PI       9DA
DECODE_DRD          96A
DECODE_IMM          A22
DECODE_NUMBER       B5A
DECODE_SIZE         866
DECODE_SIZE_TWO     888
DETERMINE_MOVEA     B8E
DIVS                C0C
DIV_MESSAGE         DC6
DIV_RT              754
DIV_STR             8
EABUFFER            70000
EMPTY_LIN           E3F
EOI_STR             A
EOR                 C5C
EOR_MESSAGE         D7F
EOR_RT              59C
EOR_STR             B
ERROR_SIZE          8AA
EXIT                2700
EXIT_SR             858
EXIT_TEST           830
FINISH              824
FINISHED            D2A
FOU_RT              6BA
GET                 404
GRAB_DEST_MODE_BITS  8EC
GRAB_DEST_REG       956
GRAB_EIGHT          8C0
GRAB_FIVE           8CC
GRAB_MODE_BITS      8E0
GRAB_SIX_AND_SEVEN  8B6
GRAB_SIZE_BITS_SEVEN_EIGHT  8AC
GRAB_SIZE_BITS_TWO  8D6
GRAB_SOURCE_MODE_BITS  8F8
GRAB_SOURCE_REG     94C
HOLDER              3F0
ICM_MESSAGE         E33
ICM_RT              714
INITIALIZE_EA       834
INITIALIZE_EA_TEST_POINTER  83C
JSR                 D0E
JSR_MESSAGE         D57
JSR_RT              514
JSR_STR             13A
LA_RT               606
LEA                 C10
LEA_MESSAGE         DA7
LEA_RT              6CA
LEA_STR             4
LF                  A
LL_RT               654
LOV_MESSAGE         DD8
LOV_RT              78C
LOV_STR             2
LR_RT               692
LSL                 C88
LSL_MESSAGE         D98
LSR                 C82
LSR_MESSAGE         D93
LS_RT               62E
MMO_MESSAGE         DF0
MMO_RT              7D4
MMO_STR             91
MM_RT               7C0
MODE_ERROR          9DA
MODE_JUMP_TABLE     992
MOVE                BAE
MOVEM               BDE
MULS                C08
MUL_MESSAGE         DC0
MUL_RT              744
MUL_STR             C
NEG                 B70
NEG_MESSAGE         D52
NEG_RT              500
NEG_STR             44
NIBBLE              476
NOP                 B6E
NOP_MESSAGE         D4D
NOP_RT              4EC
NOP_STR             4E71
NOT_FOUND           D35
N_FOUND             814
OR                  C36
ORI                 C5C
ORI_MESSAGE         E2E
ORI_RT              804
ORI_STR             0
OR_MESSAGE          DAC
OR_RT               6DE
OR_STR              8
PRINT_A             B9C
PRINT_COMMA         93A
PRINT_DOT_B         904
PRINT_DOT_L         928
PRINT_DOT_W         916
PRINT_EA_STRING     842
P_LOOP              844
QSU_MESSAGE         E28
QSU_RT              7F4
QSU_STR             5
RA_RT               61A
REGISTER_EA         CA0
REGISTER_EA_D       CCA
RL_RT               668
RMO_MESSAGE         E0C
RMO_RT              7E4
RMO_STR             99
ROL                 C94
ROL_MESSAGE         D9D
ROR                 C9A
ROR_MESSAGE         DA2
RO_RT               67C
RR_RT               6A6
RTS                 D24
RTS_MESSAGE         D5C
RTS_RT              528
RTS_STR             4E75
SHF_RT              5D6
SHF_STR             E
START               400
START_ADDR          6000
SUB                 C04
SUB_MESSAGE         DBB
SUB_RT              734
SUB_STR             9
TESTLOC             6000
TEST_BIT1           3200
TEST_BIT2           E459
WORD                408
WOV_MESSAGE         DD2
WOV_RT              778
WOV_STR             3
ZER_RT              6F2
